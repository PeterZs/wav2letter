af_build_insn = read_config("af", "build", "tp2")

af_backend = read_config("af", "backend", "afcuda")

criterion_backend = read_config(
    "criterion",
    "backend",
    "cuda" if af_backend == "afcuda" else "cpu",
)

use_fbcode = af_build_insn == "fbcode"

backend_opts_map = {
    "cpu": {
        "deps": [],
        "preprocessor_flags": [],
        "srcs": ["backend/cpu/ConnectionistTemporalCriterion.cpp"],
    },
    "cuda": {
        "deps": [
            "//deeplearning/projects/flashlight/flashlight/common:common",
            "//deeplearning/projects/wav2letter/src/third_party/warpctc:libwarpctc",
        ],
        "preprocessor_flags": [
            "-Ideeplearning/projects/wav2letter/src/third_party/warpctc/include/",
        ],
        "srcs": ["backend/cuda/ConnectionistTemporalCriterion.cpp"],
    },
}

backend_opts = backend_opts_map[criterion_backend]

cpp_library(
    name = "criterion",
    srcs = backend_opts["srcs"] + [
        "ConnectionistTemporalCriterion.cpp",
        "CriterionUtils.cpp",
        "ForceAlignmentCriterion.cpp",
        "FullConnectionCriterion.cpp",
        "Seq2SeqCriterion.cpp",
    ],
    headers = [
        "AutoSegmentationCriterion.h",
        "ConnectionistTemporalCriterion.h",
        "CriterionUtils.h",
        "Defines.h",
        "ForceAlignmentCriterion.h",
        "FullConnectionCriterion.h",
        "LinearSegmentationCriterion.h",
        "Seq2SeqCriterion.h",
        "SequenceCriterion.h",
        "criterion.h",
    ],
    preprocessor_flags = backend_opts["preprocessor_flags"],
    deps = backend_opts["deps"] + [
        "//deeplearning/projects/wav2letter/src/common:common",
        "//deeplearning/projects/wav2letter/src/criterion/attention:attention",
        "//deeplearning/projects/wav2letter/src/criterion/attention:window",
    ],
    external_deps = [("libgcc", None, "gomp")],
)
